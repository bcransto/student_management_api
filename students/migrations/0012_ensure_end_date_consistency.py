# Generated by Django 5.2.3 on 2025-08-12 17:18

from django.db import migrations
from datetime import date


def ensure_end_date_consistency(apps, schema_editor):
    """
    Ensure that:
    1. Only one period per class has end_date=None (the current one)
    2. Previous periods that were is_active=False have an end_date
    """
    SeatingPeriod = apps.get_model('students', 'SeatingPeriod')
    Class = apps.get_model('students', 'Class')
    
    today = date.today()
    
    # Process each class
    for class_obj in Class.objects.all():
        periods = SeatingPeriod.objects.filter(class_assigned=class_obj).order_by('-start_date')
        
        if not periods.exists():
            continue
            
        # Find the most recent period (should be current)
        current_found = False
        
        for period in periods:
            if not current_found and period.end_date is None:
                # This is the current period, keep end_date as None
                current_found = True
            elif period.end_date is None:
                # Multiple periods with no end_date, set this one to today
                period.end_date = today
                period.save(update_fields=['end_date'])
        
        # If no current period found, make the most recent one current
        if not current_found and periods.exists():
            most_recent = periods.first()
            if most_recent.end_date is not None:
                most_recent.end_date = None
                most_recent.save(update_fields=['end_date'])


def reverse_func(apps, schema_editor):
    # No-op for reverse
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("students", "0011_remove_seating_period_is_active"),
    ]

    operations = [
        migrations.RunPython(ensure_end_date_consistency, reverse_func),
    ]
