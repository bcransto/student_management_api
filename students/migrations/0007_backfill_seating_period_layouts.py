# Generated by Django 5.2.3 on 2025-08-09 19:52

from django.db import migrations


def backfill_layouts(apps, schema_editor):
    """
    Backfill the layout field for existing SeatingPeriod records
    by copying the layout from their associated Class.
    """
    SeatingPeriod = apps.get_model('students', 'SeatingPeriod')
    
    # Get all seating periods that don't have a layout
    seating_periods_without_layout = SeatingPeriod.objects.filter(layout__isnull=True)
    
    updated_count = 0
    skipped_count = 0
    
    for period in seating_periods_without_layout:
        # Get the layout from the associated class
        if period.class_assigned and period.class_assigned.classroom_layout:
            period.layout = period.class_assigned.classroom_layout
            period.save(update_fields=['layout'])
            updated_count += 1
            print(f"Updated SeatingPeriod {period.id} ({period.name}) with layout from class {period.class_assigned.name}")
        else:
            skipped_count += 1
            print(f"Skipped SeatingPeriod {period.id} ({period.name}) - class has no layout")
    
    print(f"\nBackfill complete: {updated_count} periods updated, {skipped_count} periods skipped")


def reverse_backfill(apps, schema_editor):
    """
    Reverse the backfill by setting layout to null for all SeatingPeriods.
    This is for rollback purposes only.
    """
    SeatingPeriod = apps.get_model('students', 'SeatingPeriod')
    
    # Clear the layout field for all seating periods
    count = SeatingPeriod.objects.filter(layout__isnull=False).update(layout=None)
    print(f"Cleared layout field from {count} SeatingPeriod records")


class Migration(migrations.Migration):

    dependencies = [
        ("students", "0006_add_layout_to_seating_period"),
    ]

    operations = [
        migrations.RunPython(backfill_layouts, reverse_backfill),
    ]
